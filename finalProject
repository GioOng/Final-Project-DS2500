#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar 26 20:07:00 2021

@author: gioong
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import csv
from sklearn import metrics


def clean_data(filename):
    ''' Read and filter data to data points that we are going to utilize
    throughout the project '''
    data = pd.read_csv(filename, index_col = 'Player')
    
    # Remove all players not drafted in first two rounds (top 60 picks)
    filtered = data[(data['Pk'] <= 30)]
    filtered = filtered.iloc[:, :-10]
    filtered = filtered.drop(filtered.columns[0], axis=1)

   
    return filtered
        
        
def clean_allstars(filename):
    ''' Create a list of all stars from a csv file that containts the names
    of every all star player up to 2020 '''
    allstars = []
    with open(filename, errors='ignore') as file:
        # reading a csv file
        reader = csv.reader(file, delimiter=',')
        
        # Add players to list
        for row in reader:
            if row[0] != 'PG':
                allstars.append(row[0])
                allstars.append(row[1])
                allstars.append(row[2])
                allstars.append(row[3])
                allstars.append(row[4])
        #
    while("" in allstars) :
        allstars.remove("")
        
        
    return allstars

    
    
def pick_number_analysis(data):
    ''' Group data by pick number and sum each grouping. Visualize the grouped
    data with the pick numbers on the x-axis and the number of allstars on the 
    y-axis
    
    Objective: Determine if there are any trends in pick numbers on how 
    successful a player is in the NBA to reveal that top 5 picks may be 
    overvalued
    '''
    
    # Group data by pick number + sum groups
    grouped_data = data.groupby(['Pk']).sum()
    
    # Visualization
    x = grouped_data.index
    y = grouped_data['allstar']
    plt.bar(x, y)
    plt.title('Number of Allstars For Each Draft Pick Number')
    plt.xlabel('Draft pick Number')
    plt.ylabel('Number of Allstars')
    plt.xticks(np.arange(min(x), max(x) + 1, 2))
    plt.yticks(np.arange(min(y), max(y) + 1, 1))
    plt.grid(axis = 'y')
    plt.show()
    
def longevity_analysis(data):
    '''Visualize master data on the longevity of a player with the pick number
    on the x-xis and years played on the y-axis. Also, the size and color of the 
    data points are sorterd by VORP and number of all star awards, respectively.
    
    Objective: Analyze the value of players based on longevity to reveal that 
    later round picks also produce very successful players'''
    ax = sns.relplot(x = 'Pk', y ='Yrs', size = 'VORP', hue = 'All.Star',
                     data = data, palette = 'RdYlGn', sizes = (10,300))
    ax.set(title = 'Comparing Longevity of a Player with Draft Pick Number',
           xlabel = 'Draft Pick Number', ylabel = 'Years Played' )    
    
def college_attended_analysis(data):
    ''' Group data by college attended and sum each grouping. Visualize the
    grouped data with the college attended on the x-axis and the number of 
    allstars on the y-axis
    
    Objective: Determine if there are any trends in college attended on 
    how successful a player is in the NBA to reveal that some programs are 
    able to develop more successful NBA prospects than others.
    '''
    # Change 
    data['College'] = data['College'].replace('0', 'Did not attend')
    
def high_school_analysis(data):
    '''Visualize master data with the pick number on the x-axis and the number of 
    years played on the y-axis.  Also, the color of the data points are sorted
    by players who came directly to the NBA from highschool or not.
    
    Objective: Identify how the success of high school prospects compares to the
    remainder of the NBA to reveal the true potential of these prospecs'''
    ax = sns.relplot(x = 'Pk', y = 'Yrs', hue = 'highschool', size = 'All.Star', 
                data = data, cmap = 'set1', sizes = (10,300))
    ax.set(title = 'Analyzing Players Drafted Out of High School',
           xlabel = 'Draft Pick Number', ylabel = 'Years Played')
    grouped_data = data.groupby(['College']).sum()
    significant = grouped_data[grouped_data['allstar'] > 1]
    x = significant.index
    y = significant['allstar']
    plt.bar(x,y)
    plt.title('Number of Allstars Produced From Each University')
    plt.xlabel('Name of College (if not attended, players are grouped')
    plt.ylabel('Number of Allstars')
    plt.xticks(rotation = 90)
    plt.yticks(np.arange(min(y), max(y) + 1))
    plt.grid(axis = 'y')

    plt.show()
    
def nba_team_analysis(data):
    '''Group data by team that drafted eac hpalyer and sum each grouping.
    Visualize the grouped data with the team that drafts them on the x-axis
    and the number of different allstars on the y-axis.
    
    Objective: Identify trends in the teams that draft each player to reveal
    that organization does play a role in developing prospects'''
    grouped_data = data.groupby(['Team']).sum()
    significant = grouped_data[grouped_data['allstar'] >1]
    x = significant.index
    y = significant['allstar']
    plt.bar(x,y)
    plt.title('Number of Allstars Produced From Each Teams Draft Picks')
    plt.xlabel('NBA Team')
    plt.ylabel('Number of Allstars')
    plt.xticks(rotation = 90)
    plt.yticks(np.arange(min(y), max(y) + 1))
    plt.grid(axis = 'y')

    plt.show()
    
def successful_organization_analysis(data):
    ''' Visualize filtered data (players who were on team that have drafted
    3 or more allstars since 2000) with the pick number on the x-axis and the 
    Value Over Replacement Player on the y-axis. Also the color of the data 
    points are sorted by team that drafted each player.
    
    Objective: Identify any trends in pick number the teams that drafted 3 or 
    more allstars to reveal team plays a large factor by showing the diverse
    pick numbers. 
    '''
    ax = sns.relplot(x = 'Pk', y = 'VORP', hue = 'Team', data = data)
    ax.set(title = 'Comparing Organizations That Produced 3 All-Stars or More',
           xlabel = 'Draft Pick Number', ylabel = 'Value Over Replacement Player' )
    

    


    

    
def eucl_dist(x1,x2):
    ''' Calculates the euclidean distance between two points'''
    diff_x = x1 - x2
    total = np.sum(diff_x **2)
    eucl = np.sqrt(total)
    return eucl
    

class KNN:
    
    def __init__(self, K=1):
        self.k = K
        
    def fit(self, X, y):
        self.X_train = X
        self.y_train = y
        
    def predict(self, X):
        predicted_values = [self.find_class(x) for x in X]
        return np.array(predicted_values)
        
        
        
    def find_class(self, x):
        ''' determine the predicted statistic according the euclidean distance between
            the test variable and the training variables. Sorting for K neareast neighbor
            and using indexing to indentify the most likely VORPs'''
        
        eucl_distances = [eucl_dist(x, x_train) for x_train in self.X_train]
        k_nearest_points = np.argsort(eucl_distances)[:self.k]
        k_nearest_labels = [self.y_train[i] for i in k_nearest_points]
        avg_score = np.array(k_nearest_labels).mean()
        
        return round(avg_score,1)
    
    
def main():
    
    #%%% READ AND CLEAN THE DATA SETS
    # Draft Data Set
    data = clean_data('draft_data.csv')
    
    # Combine Data Set
    combine_data = pd.read_csv('combine_stats.csv', index_col = 'Player')
    combine_data = combine_data.drop(combine_data.columns[0:3], axis=1)
    combine_data = combine_data.dropna()
    
    # Allstar Data Set
    all_stars = clean_allstars('ALLSTARS.CSV')
    
    # add allstars as a column based of all_stars.csv
    data['allstar'] = False
    for index, row in data.iterrows():
        if index in all_stars:
            data.loc[index,'allstar'] = True
    
    # add high school as a column based off of a list of high school players 
    highschool =  ['Kevin Garnett', 'Kobe Bryant', 'Gerald Green' 
                  "Jermaine O'Neal", 'J.R. Smith','Tracy McGrady', 
                  'Al Harrington', 'Jonathan Bender', 'Leon Smith',
                  'Darius Miles', 'DeShawn Stevenson', 'Kwame Brown',
                  'Tyson Chandler', 'Eddy Curry', 'DeSagana Diop', 
                  "Amar'e Stoudemire", 'LeBron James', 'Travis Outlaw',
                  'Ndudi Ebi','Kendrick Perkins', 'Dwight Howard',
                  'Shaun Livingston','Robert Swift', 'Sebastian Telfair',
                  'Al Jefferson', 'Josh Smith', 'Dorell Wright', 
                  'Martell Webster','Andrew Bynum']
    data['highschool'] = False
    for index, row in data.iterrows():
        if index in highschool:
            data.loc[index,'highschool'] = True
    
    hs = data[data['highschool'] == True]
    
    # filter the Draft Data Set to only those drafted after 2000s
    recent = data[data['Draft_Yr'] >= 2000]
    
    
    #%%% VISUALIZING THE INITIAL OBSERVATIONS
    pick_number_analysis(recent)
    college_attended_analysis(recent)
    nba_team_analysis(recent)
    

    #%%% VISUALIZING INDEPTH OBSERVATIONS
    sig_teams = recent[recent['Team'].isin(['CHI', 'DEN', 'IND', 'LAC', 'NOH', 'OKC', 'PHI', 'PHO', 'TOR'])]
    sig_players = sig_teams[sig_teams['allstar'] == True]
    successful_organization_analysis(sig_players)
    high_school_analysis(data)
    
    #%%% ANALYZING INDEPTH OBSERVATIONS    
    hs = data[data['highschool'] == True]
    hs_allstar = hs[hs['allstar'] == True]
    rec_allstar = recent[recent['allstar'] == True]
    kentucky = recent[recent['College'] == 'University of Kentucky']
    uk_allstar = kentucky[kentucky['allstar'] == True] 
    duke = recent[recent['College'] == 'Duke University']
    duke_allstar = duke[duke['allstar'] == True] 
    
    print('\nThe % of Kentucky Players that were allstars:')
    print(len(uk_allstar)/ len(kentucky) * 100)
    print('\nDraft pick numbers for Kentucky allstars:')
    print(uk_allstar['Pk'])
    print('\nThe % of Duke Players that were allstars:')
    print(len(duke_allstar)/ len(duke) * 100)
    print('\nThe % of allstars that were picked in the lottery since 2000:')
    print(len(rec_allstar[rec_allstar['Pk'] < 16]) / len(rec_allstar['Pk'])*100)
    print('\nThe % of allstars that were not top 5 since 2000:')
    print(len(rec_allstar[rec_allstar['Pk'] > 5]) / len(rec_allstar['Pk'])*100)
    print('\nThe % of NBA players that became all stars out of highschool is:')
    print(len(hs_allstar)/len(hs)*100)
    print('\nThe % of all stars on the 9 selected teams since 2000:')
    print(len(sig_players)/(len(recent[recent['allstar'] == True]))*100)
    print('\nThe percent of first round picks the 9 selected teams had since 2000:')
    print(len(sig_teams)/len(recent)*100)
    
    #%% MACHINE LEARNING PREDICTIONS (USING KNN)
    # merge data sets together
    full_data = recent.join(combine_data,how='inner')
 
    # create test and train data
    train = full_data.sample(frac = 0.5)
    test = full_data.drop(train.index)
    
    # get the Test labels and values
    x_test = np.array(test.iloc[:,-14:])
    y_test = np.array(test.VORP) 
    print(x_test.shape)
    print(y_test.shape)
    
    # get the Train labels and values
    X_train = np.array(train.iloc[:,-14:])
    y_train = np.array(train.VORP) 
    print(X_train.shape)
    print(y_train.shape)
    
    # predict the VORP of a player 
    k = 3
    clf = KNN(K=k)
    clf.fit(X_train, y_train)
    predictions = clf.predict(x_test)
    
    # store the results of the predictions
    results = pd.DataFrame()
    results['Actual'] = y_test
    results['predictions'] = predictions
    
    # evaluate and quantify the results
    print(metrics.max_error(y_test, predictions))
    print(metrics.mean_absolute_error(y_test, predictions))
    print(results)
    
    # Visualize the results
    fig, ax = plt.subplots()
    results['x'] = results.index + 1
    # Plot the first x and y axes:
    actual = results.plot.scatter(x = 'x', y = 'Actual', ax = ax, color='green', legend=True, label='Actual', marker='*') 
    # Plot the second x and y axes 
    pred = results.plot.scatter(x = 'x', y = 'predictions', ax = ax, secondary_y = True, color = 'orange', legend=True, label = 'Predictions', marker='o') 
    ax.set_xlabel('Test Variables')
    ax.set_ylabel('VORP')
    ax.set_title('Comparing Actual and Predictions')
    ax.grid(True)
    fig.legend([actual, pred],['Green','Orange'])
    
        
main()
    
