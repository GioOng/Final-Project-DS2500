#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar 26 20:07:00 2021

@author: gioong
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import csv
from sklearn import metrics


def clean_data(filename):
    ''' Read and filter data to data points that we are going to utilize
    throughout the project '''
    data = pd.read_csv(filename, index_col = 'Player')
    
    # Remove all players not drafted in first two rounds (top 60 picks)
    filtered = data[(data['Pk'] <= 30)]
    filtered = filtered.iloc[:, :-10]
    filtered = filtered.drop(filtered.columns[0], axis=1)

   
    return filtered
        
        
def clean_allstars(filename):
    
    allstars = []
    with open(filename, errors='ignore') as file:
        # reading a csv file
        reader = csv.reader(file, delimiter=',')
        
        for row in reader:
            if row[0] != 'PG':
                allstars.append(row[0])
                allstars.append(row[1])
                allstars.append(row[2])
                allstars.append(row[3])
                allstars.append(row[4])
    
    while("" in allstars) :
        allstars.remove("")
        
        
    return allstars

    
    
def pick_number_analysis(data):
    grouped_data = data.groupby(['Pk']).sum()   
    x = grouped_data.index
    y = grouped_data['allstar']
    plt.bar(x, y)
    plt.title('Number of Allstars For Each Draft Pick Number')
    plt.xlabel('Draft pick Number')
    plt.ylabel('Number of Allstars')
    plt.xticks(np.arange(min(x), max(x) + 1, 2))
    plt.yticks(np.arange(min(y), max(y) + 1, 1))
    plt.grid(axis = 'y')
    plt.show()
    
def college_attended_analysis(data):
    data['College'] = data['College'].replace('0', 'Highschool')

    grouped_data = data.groupby(['College']).sum()
    significant = grouped_data[grouped_data['allstar'] > 1]
    x = significant.index
    y = significant['allstar']
    plt.bar(x,y)
    plt.title('Number of Allstars Produced From Each University')
    plt.xlabel('Name of College (if not attended, all highschools are grouped')
    plt.ylabel('Number of Allstars')
    plt.xticks(rotation = 90)
    plt.yticks(np.arange(min(y), max(y) + 1))
    plt.grid(axis = 'y')

    plt.show()
    
def successful_organization_analysis(data):
    ax = sns.relplot(x = 'Pk', y = 'VORP', hue = 'Team', data = data)
    ax.set(title = 'Comparing Organizations That Produced 3 All-Stars or More',
           xlabel = 'Draft Pick Number', ylabel = 'Value Over Replacement Player' )
    
def high_school_analysis(data):
    ax = sns.relplot(x = 'Pk', y = 'Yrs', hue = 'highschool', size = 'All.Star', 
                data = data, cmap = 'set1', sizes = (10,300))
    ax.set(title = 'Analyzing Players Drafted Out of High School',
           xlabel = 'Draft Pick Number', ylabel = 'Years Played')
    
def longevity_analysis(data):
    ax = sns.relplot(x = 'Pk', y ='Yrs', size = 'VORP', hue = 'All.Star',
                     data = data, palette = 'RdYlGn', sizes = (10,300))
    ax.set(title = 'Comparing Longevity of a Player with Draft Pick Number',
           xlabel = 'Draft Pick Number', ylabel = 'Years Played' )    
    
def nba_team_analysis(data):
    grouped_data = data.groupby(['Team']).sum()
    significant = grouped_data[grouped_data['allstar'] > 1]
    x = significant.index
    y = significant['allstar']
    plt.bar(x,y)
    plt.title('Number of Allstars Produced From Each Teams Draft Picks')
    plt.xlabel('NBA Team')
    plt.ylabel('Number of Allstars')
    plt.xticks(rotation = 90)
    plt.yticks(np.arange(min(y), max(y) + 1))
    plt.grid(axis = 'y')

    plt.show()
    
def successful_organization_analysis(data):
    ax = sns.relplot(x = 'Pk', y = 'Yrs', hue = 'Team', data = data)
    ax.set(title = 'Comparing Organizations That Produced 3 All-Stars or More',
           xlabel = 'Draft Pick Number', ylabel = 'Years Played' )
    
def eucl_dist(x1,x2):
    diff_x = x1 - x2
    total = np.sum(diff_x **2)
    eucl = np.sqrt(total)
    return eucl
    

class KNN:
    
    def __init__(self, K=1):
        self.k = K
        
    def fit(self, X, y):
        self.X_train = X
        self.y_train = y
        
    def predict(self, X):
        predicted_values = [self.find_class(x) for x in X]
        return np.array(predicted_values)
        
        
        
    def find_class(self, x):
        eucl_distances = [eucl_dist(x, x_train) for x_train in self.X_train]
        
        k_nearest_points = np.argsort(eucl_distances)[:self.k]

        
        k_nearest_labels = [self.y_train[i] for i in k_nearest_points]

        
        #most_common = Counter(k_nearest_labels).most_common(1)
        avg_score = np.array(k_nearest_labels).mean()
        
        return round(avg_score,1)
    
    
def main():
    
    #%%% READ AND CLEAN THE DATA SETS
    # Draft Data Set
    data = clean_data('draft_data.csv')
    
    
    # Combine Data Set
    combine_data = pd.read_csv('combine_stats.csv', index_col = 'Player')
    combine_data = combine_data.drop(combine_data.columns[0:3], axis=1)
    combine_data = combine_data.dropna()
    
    # Allstar Data Set
    all_stars = clean_allstars('ALLSTARS.CSV')
    
    
    # add allstars as a column based of all_stars.csv
    data['allstar'] = False
    for index, row in data.iterrows():
        if index in all_stars:
            data.loc[index,'allstar'] = True
    
    # add high school as a column based off of a list of high school players 
    highschool =  ['Kevin Garnett', 'Kobe Bryant', 'Gerald Green' 
                  "Jermaine O'Neal", 'J.R. Smith','Tracy McGrady', 
                  'Al Harrington', 'Jonathan Bender', 'Leon Smith',
                  'Darius Miles', 'DeShawn Stevenson', 'Kwame Brown',
                  'Tyson Chandler', 'Eddy Curry', 'DeSagana Diop', 
                  "Amar'e Stoudemire", 'LeBron James', 'Travis Outlaw',
                  'Ndudi Ebi','Kendrick Perkins', 'Dwight Howard',
                  'Shaun Livingston','Robert Swift', 'Sebastian Telfair',
                  'Al Jefferson', 'Josh Smith', 'Dorell Wright', 
                  'Martell Webster','Andrew Bynum']
    data['highschool'] = False
    for index, row in data.iterrows():
        if index in highschool:
            data.loc[index,'highschool'] = True
    
    hs = data[data['highschool'] == True]
    
    # filter the Draft Data Set to only those drafted after 2000s
    recent = data[data['Draft_Yr'] >= 2000]
    
    
    
    
    #%%% VISUALIZING THE INITIAL OBSERVATIONS
    pick_number_analysis(recent)
    college_attended_analysis(recent)
    nba_team_analysis(recent)
    

    #%%% VISUALIZING INDEPTH OBSERVATIONS
    sig_teams = recent[recent['Team'].isin(['CHI', 'DEN', 'IND', 'LAC', 'NOH', 'OKC', 'PHI', 'PHO', 'TOR'])]
    sig_players = sig_teams[sig_teams['allstar'] == True]
    successful_organization_analysis(sig_players)
    high_school_analysis(data)
    

    
    
    #%% MACHINE LEARNING PREDICTIONS (USING KNN)
    # merge data sets together
    full_data = recent.join(combine_data,how='inner')
 
    # create test and train data
    train = full_data.sample(frac = 0.5)
    test = full_data.drop(train.index)
    
    # get the Test labels and values
    x_test = np.array(test.iloc[:,-14:])
    y_test = np.array(test.VORP) 
    print(x_test.shape)
    print(y_test.shape)
    
    # get the Train labels and values
    X_train = np.array(train.iloc[:,-14:])
    y_train = np.array(train.VORP) 
    print(X_train.shape)
    print(y_train.shape)
    
    
    
    # predict the VORP of a player 
    k = 3
    clf = KNN(K=k)
    clf.fit(X_train, y_train)
    predictions = clf.predict(x_test)
    
    # store the results of the predictions
    results = pd.DataFrame()
    results['Actual'] = y_test
    results['predictions'] = predictions
    
    
    
    # evaluate and quantify the results
    print(metrics.max_error(y_test, predictions))
    print(metrics.mean_absolute_error(y_test, predictions))
    print(results)
    
    
    # Visualize the results
    fig, ax = plt.subplots()
    results['x'] = results.index + 1
    # Plot the first x and y axes:
    actual = results.plot.scatter(x = 'x', y = 'Actual', ax = ax, color='green', legend=True, label='Actual', marker='*') 
    # Plot the second x and y axes 
    pred = results.plot.scatter(x = 'x', y = 'predictions', ax = ax, secondary_y = True, color = 'orange', legend=True, label = 'Predictions', marker='o') 
    ax.set_xlabel('Test Variables')
    ax.set_ylabel('VORP')
    ax.set_title('Comparing Actual and Predictions')
    ax.grid(True)
    fig.legend([actual, pred],['Green','Orange'])
    
        
main()
    
